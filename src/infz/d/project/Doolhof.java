/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package infz.d.project;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 *
 * @author Method
 */
public class Doolhof extends javax.swing.JPanel {
    ArrayList<Pacman> pacmanList = new ArrayList<Pacman>();
    ArrayList<Integer> whiteCellList = new ArrayList<Integer>();
    ArrayList<Integer> blackCellList = new ArrayList<Integer>();
    
    /**
     * Creates new form Doolhof
     */
    public Doolhof() {
        initComponents();
        //speelveld();
        init();
    }
     public void start(){
        initComponents();
        init();
        KeyListener listener = new luisterenaub();
        this.addKeyListener(listener);
    }
     
     public void reset(){
        pacmanList.clear();
      
        initComponents();
      
        init();
     }
        
        // Genereer het speelveld
        private void speelveld() {
            String[][] celWaarden = new String[5][5];
            final String muur = "m";
            final String veld = "v";

            for(int i=0; i < 5; i++){
                for(int j=0; j < 5; j++){
                    if(i == 0 || j == 0){
                        celWaarden[i][j] = muur;
                    } else if (i == celWaarden.length - 1 || j == celWaarden[0].length - 1) {
                        celWaarden[i][j] = muur;
                    } else {
                        celWaarden[i][j] = veld;
                    }
                }
            }
            // Laatste edit voor celWaardes
            celWaarden[2][2] = muur;
            celWaarden[0][2] = veld;
            celWaarden[4][2] = veld;
            this.setLayout(new GridLayout(5, 5));
            this.setSize(500, 400);

            for(int i = 0; i < 5; i++){
                for(int j = 0; j < 5; j++){
                    if(celWaarden[i][j].toString().equals(muur)){
                        this.add(blackCell());
                    } /*else if(celWaarden[4][2] == celWaarden[i][j]) {
                        this.add(blackCell());
                    } */else {
                        this.add(whiteCell(i, j));
                    }
                }
            }/*
            for(int i = 0; i < whiteCellList.size(); i++){
                System.out.println("White Cell: " + whiteCellList[i]);
            }*/
            
        }
        private void init() {
            Pacman pacman = new Pacman();
            pacmanList.add(pacman);

            this.requestFocusInWindow();
            this.repaint();
        }
        
        private void moveShapes(Direction direction){
            for(Pacman shape : pacmanList){
               shape.move(direction);
               //check shape itself at edge
               // AtEdge (0/maxHeigt/MaxWidth)
            }

            repaint();
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            draw(g);
        }
        
        private void draw(Graphics g){
            for(Pacman pacman: pacmanList){
                pacman.draw(g);
            }
        }
        // Andere benaming(legacy)
        private void generate(){
            this.setLayout(new GridLayout(5, 5));
            this.setSize(500, 400);
            boolean flag = false;
            for(int i = 0; i < (5 * 5); i++){
                if(flag){
                    //this.add(whiteCell());
                    flag = false;
                }else{
                    this.add(blackCell());
                    flag = true;
                }
            }
        }
        
        // Moet 2d Array(?), tijdelijk voor weergave
        private JPanel whiteCell(int row, int column){
            JPanel whiteCell = new JPanel();
            whiteCell.setBackground(Color.WHITE);
            whiteCellList.add(row, column);
            return whiteCell;
        }
        
        private JPanel blackCell(){
            JPanel blackCell = new JPanel();
            blackCell.setBackground(Color.BLACK);
            
            return blackCell;
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    public class luisterenaub implements KeyListener {
        @Override
       public void keyTyped(KeyEvent ke) {
           System.out.println("Test: key typed");
       }

       @Override
       public void keyReleased(KeyEvent ke) {
           System.out.println("Test: key released");
       }

       @Override
       public void keyPressed(KeyEvent ke) {
           switch (ke.getKeyCode())
           {
               case KeyEvent.VK_R:
                   break;
               case KeyEvent.VK_DOWN:
                   moveShapes(Direction.SOUTH);
                   break;
               case KeyEvent.VK_UP:
                   moveShapes(Direction.NORTH);
                   break;
               case KeyEvent.VK_RIGHT:
                   moveShapes(Direction.EAST);
                   break;
               case KeyEvent.VK_LEFT:
                   moveShapes(Direction.WEST);
                   break;
           }
       }   
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
